const Cart = ({ navigation }) => {
  const [cartItems, setCartItems] = useState([]);

  useEffect(() => {
    const fetchCartItems = async () => {
      try {
        let items = await AsyncStorage.getItem('cartItems');
        items = items ? JSON.parse(items) : [];
        setCartItems(items);
      } catch (error) {
        console.error('Error fetching cart items:', error);
      }
    };

    fetchCartItems();
  }, []);

  useEffect(() => {
    const updateStorage = async () => {
      try {
        await AsyncStorage.setItem('cartItems', JSON.stringify(cartItems));
      } catch (error) {
        console.error('Error updating cart items in AsyncStorage:', error);
      }
    };
    updateStorage();
  }, [cartItems]);

  const increaseQuantity = (id) => {
    setCartItems(prevItems =>
      prevItems.map(item =>
        item.id === id
          ? { ...item, quantity: item.quantity + 1 }
          : item
      )
    );
  };

  const decreaseQuantity = (id) => {
    setCartItems(prevItems =>
      prevItems.map(item =>
        item.id === id && item.quantity > 1
          ? { ...item, quantity: item.quantity - 1 }
          : item
      )
    );
  };

  const handleDeleteItem = (id) => {
    const updatedCartItems = cartItems.filter(item => item.id !== id);
    setCartItems(updatedCartItems);
  };

  const handleCheckout = async () => {
    const mergedItems = [];
    cartItems.forEach(item => {
      const existingItem = mergedItems.find(i => i.id === item.id && i.option === item.option);
      if (existingItem) {
        existingItem.quantity += item.quantity;
      } else {
        mergedItems.push({ ...item });
      }
    });

    console.log('Items to checkout:', mergedItems);
    // Gửi mergedItems lên API
  };

  return (
    <View style={styles.container}>
      <FlatList
        data={cartItems}
        keyExtractor={(item, index) => index.toString()}
        renderItem={({ item }) => (
          <View style={styles.item}>
            <Text>{item.name}</Text>
            <Text>{item.price}</Text>
            <Text>{item.option}</Text>
            <View style={styles.quantityContainer}>
              <Button title="-" onPress={() => decreaseQuantity(item.id)} />
              <Text>{item.quantity}</Text>
              <Button title="+" onPress={() => increaseQuantity(item.id)} />
            </View>
            <Button title="Xóa" onPress={() => handleDeleteItem(item.id)} color="red" />
          </View>
        )}
      />
      <TouchableOpacity style={styles.checkoutButton} onPress={handleCheckout}>
        <Text style={styles.checkoutButtonText}>Thanh toán</Text>
      </TouchableOpacity>
    </View>
  );
};



export default Cart;
